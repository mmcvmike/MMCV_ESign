@{
    ViewBag.Title = "User information";
    var currentUser = MMCV_Model.User.UserBO.Current.CurrentUser();
}
@section styles{
    <style>
        #sig-canvas {
            border: 2px dotted #CCCCCC;
            border-radius: 15px;
            cursor: crosshair;
            height: 160px;
            max-width: 618px;
            /*width: 618px;*/
        }

        .signature-table {
            height: 240px;
            overflow: auto;
            border: 1px solid #dddddd;
        }

        .signature-table tr, .signature-table th, .signature-table td {
            text-align: center;
            font-size: 11px;
        }

        .sticky-thead {
            position: sticky;
            background: whitesmoke;
            top: 0;
            z-index: 10;
        }

        .rd-default-sig {
            top: 2px;
            transform: scale(1.5);
            margin-right: 5px;
        }

    </style>
}

<div class="p-3 dashboard">
    <div class="row">
        <div class="col-sm-6 col-md-4">
            <div class="card card-stats card-round">
                <div class="card-body ">
                    <label><strong>General User Information</strong></label>
                    <hr />
                    Fullname: @currentUser.Fullname <br />
                    Email: @currentUser.Email <br />
                    Department: @currentUser.DepartmentName <br />
                    Position: @currentUser.PositionName <br />
                </div>
            </div>
            <div class="card card-stats card-round">
                <div class="card-body ">
                    <label><strong>Settings</strong></label>
                    <hr />
                
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-md-8">
            <div class="card card-stats card-round">
                <div class="card-body ">
                    <label><strong>Signature Information</strong></label>
                    <hr />
                    <div class="col-md-12 p-0 ">
                        <div class="col-md-12 col-sm-12 p-0">
                            <div class="row">
                                <div class="col-md-12">
                                    <h2>E-Signature</h2>
                                    <p class="text-info">Draw in the canvas below or upload your own signature image and save your signature!</p>
                                </div>
                            </div>
                            <div class="mb-2">
                                <input type="file" id="imageLoader" name="imageLoader" accept="image/*" />
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <canvas id="sig-canvas">
                                        Get a better browser, bro.
                                    </canvas>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <button class="btn btn-success btn-sm" id="sig-submitBtn" onclick="addSignature()">Submit Signature</button>
                                    <button class="btn btn-light btn-sm" id="sig-clearBtn" onclick="clearSignature()">Clear Signature</button>
                                    <button class="btn btn-primary btn-sm" onclick="updateUserStamp()">Update Stamp</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 p-0 mt-2 signature-table">
                            <table class="table table-bordered">
                                <thead class="sticky-thead">
                                    <tr>
                                        <td>ID</td>
                                        <td>Signature</td>
                                        <td>Stamp</td>
                                        <td>Default</td>
                                        <td></td>
                                    </tr>
                                </thead>
                                <tbody id="signature-table-body">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        window.requestAnimFrame = (function (callback) {
            return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimaitonFrame ||
                function (callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
        })();

        var canvas = document.getElementById("sig-canvas");
        var ctx = canvas.getContext("2d");
        ctx.strokeStyle = "#222222";
        ctx.lineWidth = 4;

        var drawing = false;
        var mousePos = {
            x: 0,
            y: 0
        };
        var lastPos = mousePos;

        canvas.addEventListener("mousedown", function (e) {
            drawing = true;
            lastPos = getMousePos(canvas, e);
        }, false);

        canvas.addEventListener("mouseup", function (e) {
            drawing = false;
        }, false);

        canvas.addEventListener("mousemove", function (e) {
            mousePos = getMousePos(canvas, e);
        }, false);

        // Add touch event support for mobile
        canvas.addEventListener("touchstart", function (e) {

        }, false);

        canvas.addEventListener("touchmove", function (e) {
            var touch = e.touches[0];
            var me = new MouseEvent("mousemove", {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(me);
        }, false);

        canvas.addEventListener("touchstart", function (e) {
            mousePos = getTouchPos(canvas, e);
            var touch = e.touches[0];
            var me = new MouseEvent("mousedown", {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(me);
        }, false);

        canvas.addEventListener("touchend", function (e) {
            var me = new MouseEvent("mouseup", {});
            canvas.dispatchEvent(me);
        }, false);

        function getMousePos(canvasDom, mouseEvent) {
            var rect = canvasDom.getBoundingClientRect();
            return {
                x: mouseEvent.clientX - rect.left,
                y: mouseEvent.clientY - rect.top
            }
        }

        function getTouchPos(canvasDom, touchEvent) {
            var rect = canvasDom.getBoundingClientRect();
            return {
                x: touchEvent.touches[0].clientX - rect.left,
                y: touchEvent.touches[0].clientY - rect.top
            }
        }

        function renderCanvas() {
            if (drawing) {
                ctx.moveTo(lastPos.x, lastPos.y);
                ctx.lineTo(mousePos.x, mousePos.y);
                ctx.stroke();
                lastPos = mousePos;
            }
        }

        // Prevent scrolling when touching the canvas
        document.body.addEventListener("touchstart", function (e) {
            if (e.target == canvas) {
                //e.preventDefault();
            }
        }, false);
        document.body.addEventListener("touchend", function (e) {
            if (e.target == canvas) {
                //e.preventDefault();
            }
        }, false);
        document.body.addEventListener("touchmove", function (e) {
            if (e.target == canvas) {
                //e.preventDefault();
            }
        }, false);

        (function drawLoop() {
            requestAnimFrame(drawLoop);
            renderCanvas();
        })();

        function clearCanvas() {
            canvas.width = "618";
            canvas.height = "160";
            canvas.width = canvas.width;
            canvas.height = canvas.height;
        }

        // Set up the UI
        var baseUrl = "/User/";

        $(document).ready(() => {
            getSignatures();
            clearCanvas();
        })

        var listSignatures = [];
        function getSignatures() {
            let action = baseUrl + 'GetUserSignatures';
            LoadingShow();
            GetDataAjax(action, function (response) {
                LoadingHide();
                if (response.rs) {
                    let data = response.data;
                    listSignatures = data;
                    listSignatures.forEach((ele, index) => {
                        appendSignature(ele);
                    })
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function appendSignature(data) {
            let signatureTable = $("#signature-table-body");
            let html = `
                    <tr id="tr-${data.UserSignatureID}">
                        <td>${data.UserSignatureID}</td>
                        <td>
                            <img src='${data.Base64Signature}' width='100px' height='40x' />
                        </td>
                        <td>
                            <img src='@currentUser.StampBase64' width='100px' height='40x' />
                        </td>
                        <td>
                            <div class="form-check">
                              <input class="form-check-input rd-default-sig" onchange="setDefaultSignature(${data.UserSignatureID})" type="radio" name="sig-default-radio" ${data.IsDefault == 1 ? "checked" : ""} data-val="${data.UserSignatureID}" id="sig-radio-${data.UserSignatureID}">
                              <label class="form-check-label" for="sig-radio-${data.UserSignatureID}">
                                Default signature
                              </label>
                            </div>
                        </td>
                        <td>
                            <button class='btn btn-light btn-sm' onclick="deleteSignature(${data.UserSignatureID})" data-val="${data.UserSignatureID}"><i class='fa fa-trash text-danger'></i></button>
                        </td>
                    </tr>
                `;
            signatureTable.append(html);
        }

        function deleteSignature(id){
            let userSigID = id;

            let action = baseUrl + 'DeleteSignature';
            var datasend = {
                UserSignatureID: userSigID
            };
            LoadingShow();
            PostDataAjax(action, datasend, function (response) {
                LoadingHide();
                if (response.rs) {
                    var delSig = listSignatures.filter(x => x.UserSignatureID == id)[0];
                    listSignatures.splice(listSignatures.indexOf(delSig), 1);
                    $(`#tr-${userSigID}`).hide();
                    toastr.success(response.msg, "Success");
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function setDefaultSignature(id) {
            let userSigID = id;

            let action = baseUrl + 'SetDefaultSignature';
            var datasend = {
                UserSignatureID: userSigID
            };
            LoadingShow();
            PostDataAjax(action, datasend, function (response) {
                LoadingHide();
                if (response.rs) {
                    toastr.success(response.msg, "Success");
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function clearSignature(e) {
            clearCanvas();
        };

        function addSignature() {
            if (listSignatures.length > 5) {
                toastr.error("Total signature is not over 5", "Error");
                return false;
            }
            var dataUrl = canvas.toDataURL();

            // save dataUrl to database
            let action = baseUrl + 'AddUserSignature';
            var datasend = {
                Base64Signature: dataUrl
            };
            LoadingShow();
            PostDataAjax(action, datasend, function (response) {
                LoadingHide();
                if (response.rs) {
                    let data = response.data;
                    appendSignature(data); // append data to table below
                    listSignatures.push(data); // add to list signatures
                    toastr.success(response.msg, "Success");
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        };

        var imageLoader = document.getElementById('imageLoader');
        imageLoader.addEventListener('change', handleImage, false);

        function handleImage(e) {
            var reader = new FileReader();
            reader.onload = function (event) {
                var img = new Image();
                img.onload = function () {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);
                }
                img.src = event.target.result;
            }
            reader.readAsDataURL(e.target.files[0]);
        }

        function updateUserStamp() {
            var dataUrl = canvas.toDataURL();

            let action = baseUrl + 'UpdateUserStamp';
            var datasend = {
                UserID: @currentUser.UserID,
                StampBase64: dataUrl
            };
            LoadingShow();
            PostDataAjax(action, datasend, function (response) {
                LoadingHide();
                if (response.rs) {
                    toastr.success(response.msg, "Success");
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

    </script>
}
