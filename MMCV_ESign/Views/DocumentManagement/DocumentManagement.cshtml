@{
    ViewBag.Title = "Document Management";
    var currentUser = MMCV_Model.User.UserBO.Current.CurrentUser();
    var isAdmin = currentUser != null ? (currentUser.IsAdmin) ? "" : "d-none" : "d-none";
    var tags = (List<MMCV_Model.DB68.Tag>)ViewBag.UserTags;
}
@section styles{
    <style>
        @@media screen and (max-width: 767px) {
            div.dataTables_wrapper div.dataTables_length, div.dataTables_wrapper div.dataTables_filter, div.dataTables_wrapper div.dataTables_info, div.dataTables_wrapper div.dataTables_paginate {
                text-align: right;
            }
        }

        .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active {
            /*color: black;*/
            /*background-color: #e9ecef;*/
            color: white;
            background-color: #35cd3a;
            border-color: #dee2e6 #dee2e6 #fff;
        }

        .document-management a {
            /*color: #9a9a9a;*/
        }

        #docTab {
            line-height: 25px;
        }

        .dataTable > thead > tr > th[class*="sort"]:before,
        .dataTable > thead > tr > th[class*="sort"]:after {
            /*content: "" !important;*/
        }

        .ms-tag{
            cursor: pointer;
        }

        .tag-active {
            background: #35cd3a;
            color: white;
        }

    </style>
}

@section ModalAddDoc
{
    <button class="btn btn-outline-primary bg-white" data-toggle="modal" data-target="#modalAddDocument"><i class="fa fa-plus"></i></button>
}

<div class="p-3 document-management">
    <ul class="nav nav-tabs" id="docTab" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="meSign-tab" onclick="getMeSignDocuments()" data-toggle="tab" href="#meSign" role="tab" aria-controls="meSign" aria-selected="true"><strong>Me Sign</strong></a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="sent-tab" onclick="getSentDocuments()" data-toggle="tab" href="#sent" role="tab" aria-controls="sent" aria-selected="false"><strong>Sent</strong></a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="draft-tab" onclick="getDraftDocuments()" data-toggle="tab" href="#draft" role="tab" aria-controls="draff" aria-selected="false"><strong>Draft</strong></a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="cancel-tab" onclick="getCancelDocuments()" data-toggle="tab" href="#cancel" role="tab" aria-controls="cancel" aria-selected="false"><strong>Cancel</strong></a>
        </li>
    </ul>
    <div class="tab-content pt-2" id="tabDoc">
        <div class="tab-pane fade show active" id="meSign" role="tabpanel" aria-labelledby="meSign-tab">
            <div class="card">
                <div class="card-body p-0 pt-2 pb-2">
                    <div class="d-flex pl-3">
                        <div class="pl-0 pr-1">
                            <strong>Title</strong>
                            <input type="text" class="form-control form-control-sm" id="txtFilterMeSignTitle" autocomplete="off" />
                        </div>
                        @*<div class="pl-0 pr-1">
                                <strong>Reference Code</strong>
                                <input type="text" class="form-control form-control-sm" id="txtFilterMeSignRefCode" autocomplete="off" />
                            </div>*@
                        <div class="pl-0 pr-1">
                            <strong>Signing Status</strong>
                            <div class="">
                                <select id="txtFilterMeSignStatus" class="form-control form-control-sm">
                                    <option value="">All</option>
                                    <option value="0">No action</option>
                                    <option value="1">Signed</option>
                                    <option value="2">Declined</option>
                                </select>
                            </div>
                        </div>
                        <div class="pl-0 pr-1">
                            <strong>From</strong>
                            <input type="date" class="form-control form-control-sm" id="txtFilterMeSignFromDate" autocomplete="off" />
                        </div>
                        <div class="pl-0 pr-1">
                            <strong>To</strong>
                            <input type="date" class="form-control form-control-sm" id="txtFilterMeSignToDate" autocomplete="off" />
                        </div>
                        <div class="align-self-end">
                            <button type="button" class="btn btn-success btn-sm" onclick="getMeSignDocuments()"><i class="fa fa-search"></i>&nbsp;Search</button>
                        </div>
                    </div>
                    <div class="d-flex pl-3">
                        Tags: 
                        <div class="d-flex" id="tag-area">
                            <span class="badge badge-light p-2 ml-2 ms-tag tag-active" id="ms_tag_0" onclick='tagClick(0)'>
                                <span>ALL @*<span id="number0">0</span>*@</span>
                            </span>
                            @foreach (MMCV_Model.DB68.Tag item in tags)
                            {
                                <span class="badge badge-light p-2 ml-2 ms-tag" id="ms_tag_@item.TagID" onclick='tagClick(@item.TagID)'>
                                    <span>@item.TagName @*<span id="tag_number_@item.TagID">0</span>*@</span>
                                </span>
                            }
                        </div>
                    </div>

                    <div id="folder00" class="folder m-0 p-0">
                        <table id="meSignDocumentDT" class="table table-bordered table-striped table-hover dataTable" style="width:100%">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Issuer</th>
                                    <th>Title</th>
                                    <th>Status</th>
                                    <th>Your Sign Status</th>
                                    <th>CreatedDate</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody class="sortable-list">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="sent" role="tabpanel" aria-labelledby="sent-tab">
            <div class="card">
                <div class="card-body p-0 pt-2 pb-2">
                    <div class="d-flex pl-3">
                        <div class="pl-0 pr-1">
                            <strong>Title</strong>
                            <input type="text" class="form-control form-control-sm" id="txtFilterSentTitle" autocomplete="off" />
                        </div>
                        @*<div class="pl-0 pr-1">
                                <strong>Reference Code</strong>
                                <input type="text" class="form-control form-control-sm" id="txtFilterSentRefCode" autocomplete="off" />
                            </div>*@
                        <div class="pl-0 pr-1">
                            <strong>Status</strong>
                            <div class="">
                                <select id="txtFilterSentStatus" class="form-control form-control-sm">
                                    <option value="">All</option>
                                    <option value="0">Initial</option>
                                    <option value="1">Completed</option>
                                </select>
                            </div>
                        </div>
                        <div class="pl-0 pr-1">
                            <strong>Signing Status</strong>
                            <div class="">
                                <select id="txtFilterSentSignStatus" class="form-control form-control-sm">
                                    <option value="">All</option>
                                    <option value="0">No action</option>
                                    <option value="1">Signed</option>
                                    <option value="2">Declined</option>
                                </select>
                            </div>
                        </div>
                        <div class="pl-0 pr-1">
                            <strong>Document Type</strong>
                            <div class="">
                                <select id="txtFilterSentDocumentType" class="form-control form-control-sm">
                                </select>
                            </div>
                        </div>
                        <div class="pl-0 pr-1">
                            <strong>From</strong>
                            <input type="date" class="form-control form-control-sm" id="txtFilterSentFromDate" autocomplete="off" />
                        </div>
                        <div class="pl-0 pr-1">
                            <strong>To</strong>
                            <input type="date" class="form-control form-control-sm" id="txtFilterSentToDate" autocomplete="off" />
                        </div>
                        <div class="align-self-end">
                            <button type="button" class="btn btn-success btn-sm" onclick="getSentDocuments()"><i class="fa fa-search"></i>&nbsp;Search</button>
                        </div>
                    </div>
                    <table id="sentDocumentDT" class="table table-bordered table-striped table-hover" style="width:100%">
                        <thead>
                            <tr>
                                <th>ID</th>
                                @*<th>ReferenceCode</th>*@
                                <th>Title</th>
                                <th>Status</th>
                                <th>CreatedDate</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="draft" role="tabpanel" aria-labelledby="draft-tab">
            <div class="card">
                <div class="card-body p-0 pb-2">
                    <table id="draftDocumentDT" class="table table-bordered table-striped table-hover dataTable" style="width:100%">
                        <thead>
                            <tr>
                                <th>ID</th>
                                @*<th>ReferenceCode</th>*@
                                <th>Title</th>
                                <th>Status</th>
                                <th>CreatedDate</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="cancel" role="tabpanel" aria-labelledby="cancel-tab">
            <div class="card">
                <div class="card-body p-0 pb-2">
                    <table id="cancelDocumentDT" class="table table-bordered table-striped table-hover dataTable" style="width:100%">
                        <thead>
                            <tr>
                                <th>ID</th>
                                @*<th>ReferenceCode</th>*@
                                <th>Title</th>
                                <th>Status</th>
                                <th>CreatedDate</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>

    </div>
</div>
<div class="modal" id="quickViewModal" tabindex="-1">
    <div class="modal-80">
        <div class="modal-content">
            @*<div class="modal-header">
                    <h4 class="modal-title">Quick view document</h4>
                    <button type="button" class="text-danger close" data-dismiss="modal">&times;</button>
                </div>*@
            <div class="modal-header">
                <i class="fa fa-eye-dropper modal-header-icon"></i>
                <h3 class="modal-title" style="font-size: 1.3rem">
                    &nbsp;&nbsp;QUICK VIEW DOCUMENT
                </h3>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
            </div>
            <div class="modal-body pt-0">
                <iframe src="" width="100%" height="600" id="qvFrame" title="">
                </iframe>
            </div>
        </div>
    </div>
</div>

@Html.Partial("~/Views/PartialView/ModalAddDocument.cshtml")

@section scripts{
    @*<script src="~/Scripts/ESign/DocumentManagement/documentManagement.js"></script>*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
    <script>
        /*
        * variables
        * */

        var baseUrl = "/DocumentManagement/";
        var activeTabLocalStorage = "docMgrActiveTab";
        var tabs = {
            meSign: "#meSign",
            sent: "#sent",
            draft: "#draft",
            cancel: "#cancel"
        }

        /*
        * methods
        * */

        $(document).ready(() => {
            showActiveTab();
            getDocumentTypesIndex();
            //getTags();

        })

        var currentTagId = 0;
        function tagClick(tagId) {
            currentTagId = tagId;
            getMeSignDocuments();

            // highlight menu li
            $(".folder").each((i, ele) => {
                $(ele).removeClass("folder-active");
            });
            $("#folder_" + tagId).addClass("folder-active");

            // highlight tag
            $(".ms-tag").each((i, ele) => {
                $(ele).removeClass("tag-active");
            });
            $("#ms_tag_" + tagId).addClass("tag-active");
            $("#tag_number_" + tagId).text();
        }

        function showActiveTab() {
            if (!localStorage.getItem(activeTabLocalStorage))
                localStorage.setItem(activeTabLocalStorage, tabs.meSign);

            var activeTab = localStorage.getItem(activeTabLocalStorage);
            if (activeTab) {
                $(".tab-pane").removeClass("active");
                $(".nav-link").removeClass("active");
                $(activeTab).addClass("active");
                let currentTab = $(document.querySelector(`[href='${activeTab}']`));
                currentTab.click();
                currentTab.addClass('active');
            }
        }

        function getMeSignDocuments() {
            let txtTitle = $("#txtFilterMeSignTitle").val();
            let txtRefCode = $("#txtFilterMeSignRefCode").val();
            let txtStatus = $("#txtFilterMeSignStatus").val();
            let txtFromDate = $("#txtFilterMeSignFromDate").val();
            let txtToDate = $("#txtFilterMeSignToDate").val();

            let action = baseUrl + 'GetMeSignDocuments';
            var datasend = {
                Title: txtTitle,
                ReferenceCode: txtRefCode,
                Status: txtStatus,
                FromDate: txtFromDate,
                ToDate: txtToDate,
                TagId: currentTagId
            };

            LoadingShow();
            localStorage.setItem(activeTabLocalStorage, tabs.meSign);
            PostDataAjax(action, datasend, function (response) {
                LoadingHide();
                if (response.rs) {
                    let data = response.data;
                    setTimeout(() => {
                        bindMeSignDocumentDataTable(data);
                    }, 200);
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function getSentDocuments() {
            let txtTitle = $("#txtFilterSentTitle").val();
            let txtRefCode = $("#txtFilterSentRefCode").val();
            let txtStatus = $("#txtFilterSentStatus").val();
            let txtSignStatus = $("#txtFilterSentSignStatus").val();
            let txtDocType = $("#txtFilterSentDocumentType").val();
            let txtFromDate = $("#txtFilterSentFromDate").val();
            let txtToDate = $("#txtFilterSentToDate").val();

            let action = baseUrl + 'GetSentDocuments';
            var datasend = {
                Title: txtTitle,
                ReferenceCode: txtRefCode,
                Status: txtStatus,
                SignStatus: txtSignStatus,
                DocumentType: txtDocType,
                FromDate: txtFromDate,
                ToDate: txtToDate
            };

            LoadingShow();
            localStorage.setItem(activeTabLocalStorage, tabs.sent);
            PostDataAjax(action, datasend, function (response) {
                LoadingHide();
                if (response.rs) {
                    let data = response.data;
                    setTimeout(() => {
                        bindSentDocumentDataTable(data);
                    }, 200);
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function getDraftDocuments() {
            let action = baseUrl + 'GetDraftDocuments';
            LoadingShow();
            localStorage.setItem(activeTabLocalStorage, tabs.draft);
            GetDataAjax(action, function (response) {
                LoadingHide();
                if (response.rs) {
                    let data = response.data;
                    setTimeout(() => {
                        bindDraftDocumentDataTable(data);
                    }, 200);
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function getCancelDocuments() {
            let action = baseUrl + 'GetCancelDocuments';
            LoadingShow();
            localStorage.setItem(activeTabLocalStorage, tabs.cancel);
            GetDataAjax(action, function (response) {
                LoadingHide();
                if (response.rs) {
                    let data = response.data;
                    setTimeout(() => {
                        bindCancelDocumentDataTable(data);
                    }, 200);
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function getNameOfStatus(data) {
            let nameOfStatus = "";
            let initial = "<span class='badge badge-primary'>Initial</span>";
            let completed = "<span class='badge badge-success'>Completed</span>";
            let decline = "<span class='badge badge-warning'>Decline</span>";
            let draft = "<span class='badge badge-default'>Draft</span>";
            let cancel = "<span class='badge badge-danger'>Cancel</span>";

            nameOfStatus = data == 0 ? initial : (data == 1 ? completed : (data == 2 ? decline : (data == 3 ? cancel : draft)));

            return nameOfStatus;
        }

        function getNameOfSignerStatus(data) {
            let nameOfStatusSign = "";
            let signed = "<span class='badge badge-primary'>Signed</span>";
            let declined = "<span class='badge badge-danger'>Declined</span>";
            let initialSign = "<span class='badge badge-ligth'>No action</span>";

            nameOfStatusSign = data == 0 ? initialSign : (data == 1 ? signed : declined);

            return nameOfStatusSign;
        }

        function bindMeSignDocumentDataTable(data) {
            $("#meSignDocumentDT").DataTable({
                "destroy": true,
                "lengthChange": false,
                "pageLength": 10,
                "data": data,
                "order": [],
                "filter": false, // this is for disable filter (search box)

                "createdRow": function (row, data, dataIndex) {
                    // Set the data-status attribute, and add a class
                    $(row).attr('data-id', data.DocumentID);
                    $(row).attr('id', "doc" + data.DocumentID);
                },
                "columns": [
                    { "data": "DocumentID", "autoWidth": false },
                    { "data": "Issuer", "autoWidth": false },
                    { "data": "Title", "autoWidth": false },
                    {
                        data: 'Status',
                        render: function (data, type, row) {
                            return getNameOfStatus(data);
                        },
                    },
                    {
                        data: 'SignerStatus',
                        render: function (data, type, row) {
                            return getNameOfSignerStatus(data);
                        },
                    },
                    {
                        data: 'CreatedDate',
                        render: function (data, type, row) {
                            return data != "/Date(-62135596800000)/" ? formatDDMMYYHHMMSS(justNumbers(data)) : "";
                        },
                    },
                    {
                        data: null,
                        autoWidth: '30%',
                        className: 'text-left',
                        render: function (data, type, row) {
                            var html = `
                                        <a href='/DocumentManagement/DetailView?docId=${row.DocumentID}' class='btn btn-light btn-sm'><i class='fa fa-info text-primary'></i>&nbsp;</a>
                                        <a href='javascript:void(0)' onclick='quickView(${row.DocumentID})' class='btn btn-light btn-sm'><i class='fa fa-eye text-default'></i>&nbsp;</a>
                                    `;
                            if (data.Status == 0) {
                                html +=`<a href='/Home/PdfPage?docId=${row.DocumentID}' class='btn btn-light btn-sm'><i class='fa fa-sign text-success'></i>&nbsp;Sign</a>`;
                            } else {
                                html += `<a href='/Home/PdfPage?docId=${row.DocumentID}' class='btn btn-light btn-sm @isAdmin'><i class='fa fa-pen-nib text-success'></i>&nbsp;Sign</a>`;
                            }
                            return html;
                        },
                    },
                ],
                "columnDefs": [
                    { "className": "text-center", "targets": "_all" }, //{ "className": "text-center", "targets": [0,1,2,3,4] },
                ],
                "language": {
                    "info": "Show _START_ - _END_ / _TOTAL_",
                    "paginate": {
                        'previous': '<span class="la flaticon-left-arrow"></span>',
                        'next': '<span class="la flaticon-right-arrow"></span>'
                    },
                },
                "scrollY": "530px",
                "scrollX": true,
                //"fixedColumns": {
                //    left: 1,
                //},
            });
        }

        function bindSentDocumentDataTable(data) {
            $("#sentDocumentDT").DataTable({
                /*"dom": '<"top"i>rt<"bottom"flp><"clear">',*/
                "destroy": true,
                "lengthChange": false,
                "pageLength": 10,
                "data": data,
                "filter": false, // this is for disable filter (search box)
                "orderMulti": false, // for disable multiple column at once
                "order": [],
                "sort": true,
                "columns": [
                    { "data": "DocumentID", "autoWidth": false },
                    //{ "data": "ReferenceCode", "autoWidth": false },
                    { "data": "Title", "autoWidth": false },
                    {
                        data: 'Status',
                        render: function (data, type, row) {
                            return getNameOfStatus(data);
                        },
                    },
                    {
                        data: 'CreatedDate',
                        render: function (data, type, row) {
                            return data != "/Date(-62135596800000)/" ? formatDDMMYYHHMMSS(justNumbers(data)) : "";
                        },
                    },
                    {
                        data: null,
                        autoWidth: '30%',
                        className: 'text-left',
                        render: function (data, type, row) {
                            let html = `
                                        <a href='/DocumentManagement/DetailView?docId=${row.DocumentID}' class='btn btn-light btn-sm'><i class='fa fa-info text-primary'></i></a>
                                        <a href='javascript:void(0)' onclick='quickView(${row.DocumentID})' class='btn btn-light btn-sm'><i class='fa fa-eye text-default'></i></a>
                                    `;
                            if (data.Status == 0) {
                                html += `<a href='/Home/PdfPage?docId=${row.DocumentID}' class='btn btn-light btn-sm'><i class='fa fa-pen-nib text-success'></i>&nbsp;Sign</a>`;
                            } else {
                                html += `<a href='/Home/PdfPage?docId=${row.DocumentID}' class='btn btn-light btn-sm @isAdmin'><i class='fa fa-pen-nib text-success'></i>&nbsp;Sign</a>`;
                            }
                            return html;
                        },
                    },
                ],
                "columnDefs": [
                    { "className": "text-center", "targets": "_all" },
                ],
                "language": {
                    "info": "Show _START_ - _END_ / _TOTAL_",
                    "paginate": {
                        'previous': '<span class="la flaticon-left-arrow"></span>',
                        'next': '<span class="la flaticon-right-arrow"></span>'
                    },
                },
                "scrollY": "530px",
                "scrollX": true,
                //"fixedColumns": {
                //    left: 1,
                //},
            });
        }

        function bindDraftDocumentDataTable(data) {
            $("#draftDocumentDT").DataTable({
                "destroy": true,
                "lengthChange": false,
                "pageLength": 10,
                "data": data,
                "filter": false, // this is for disable filter (search box)
                "orderMulti": false, // for disable multiple column at once
                "sort": false,
                "order": [],
                "columns": [
                    { "data": "DocumentID", "autoWidth": false },
                    //{ "data": "ReferenceCode", "autoWidth": false },
                    { "data": "Title", "autoWidth": false },
                    {
                        data: 'Status',
                        render: function (data, type, row) {
                            return getNameOfStatus(data);
                        },
                    },
                    {
                        data: 'CreatedDate',
                        render: function (data, type, row) {
                            return data != "/Date(-62135596800000)/" ? formatDDMMYYHHMMSS(justNumbers(data)) : "";
                        },
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            let html = `
                                        <a href='/DocumentManagement/DetailView?docId=${row.DocumentID}' class='btn btn-light btn-sm'><i class='fa fa-info text-primary'></i>&nbsp;Detail</a>
                                        <a href='/Home/PdfPage?docId=${row.DocumentID}' class='btn btn-light btn-sm'><i class='fa fa-sign text-success'></i>&nbsp;Sign</a>
                                        <a href='javascript:void(0)' onclick='quickView(${row.DocumentID})' class='btn btn-light btn-sm'><i class='fa fa-eye text-default'></i>&nbsp;Quick view</a>
                                    `;
                            return html;
                        },
                    },
                ],
                "columnDefs": [
                    { "className": "text-center", "targets": "_all" },
                ],
                "language": {
                    "info": "Show _START_ - _END_ / _TOTAL_",
                    "paginate": {
                        'previous': '<span class="la flaticon-left-arrow"></span>',
                        'next': '<span class="la flaticon-right-arrow"></span>'
                    },
                },
                "scrollY": "530px",
                "scrollX": true,
                //"fixedColumns": {
                //    left: 1,
                //},
            });
        }

        function bindCancelDocumentDataTable(data) {
            $("#cancelDocumentDT").DataTable({
                "destroy": true,
                "lengthChange": false,
                "pageLength": 10,
                "data": data,
                "filter": false, // this is for disable filter (search box)
                "orderMulti": false, // for disable multiple column at once
                "sort": false,
                "order": [],
                "columns": [
                    { "data": "DocumentID", "autoWidth": false },
                    //{ "data": "ReferenceCode", "autoWidth": false },
                    { "data": "Title", "autoWidth": false },
                    {
                        data: 'Status',
                        render: function (data, type, row) {
                            return getNameOfStatus(data);
                        },
                    },
                    {
                        data: 'CreatedDate',
                        render: function (data, type, row) {
                            return data != "/Date(-62135596800000)/" ? formatDDMMYYHHMMSS(justNumbers(data)) : "";
                        },
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            let html = `
                                        <a href='/DocumentManagement/DetailView?docId=${row.DocumentID}' class='btn btn-light btn-sm'><i class='fa fa-info text-primary'></i>&nbsp;Detail</a>
                                        <a href='javascript:void(0)' onclick='quickView(${row.DocumentID})' class='btn btn-light btn-sm'><i class='fa fa-eye text-default'></i>&nbsp;Quick view</a>
                                    `;
                            return html;
                        },
                    },
                ],
                "columnDefs": [
                    { "className": "text-center", "targets": "_all" },
                ],
                "language": {
                    "info": "Show _START_ - _END_ / _TOTAL_",
                    "paginate": {
                        'previous': '<span class="la flaticon-left-arrow"></span>',
                        'next': '<span class="la flaticon-right-arrow"></span>'
                    },
                },
                "scrollY": "530px",
                "scrollX": true,
                //"fixedColumns": {
                //    left: 1,
                //},
            });
        }

        function addDocument() {
            let action = baseUrl + 'AddDocument';
            var datasend = JSON.stringify({

            });
            LoadingShow();
            PostDataAjax(action, datasend, function (response) {
                LoadingHide();
                if (response.rs) {
                    getDocuments();
                    toastr.success(response.msg, "Success");
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function viewDocument() {
            let action = '/Home/PdfPage';
            var datasend = JSON.stringify({

            });
            LoadingShow();
            PostDataAjax(action, datasend, function (response) {
                LoadingHide();
                if (response.rs) {
                    getDocuments();
                    toastr.success(response.msg, "Success");
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function quickView(id) {
            LoadingShow();
            let action = baseUrl + 'GetDocumentBase64Data';
            var datasend = {
                docId: id
            };
            PostDataAjax(action, datasend, function (response) {
                if (response.rs) {
                    let data = response.data;
                    let mimeType = "data:application/pdf;base64,";
                    let base64 = data.Base64File;

                    $("#quickViewModal").modal("show");
                    $("#qvFrame").attr("src", mimeType + base64);
                    let iframe = $('iframe');
                    if (iframe.length) {
                        $(iframe).on('load', function () {
                            setTimeout(() => {
                                LoadingHide();
                            })
                        });
                    }
                }
                else {
                    LoadingHide();
                    toastr.error(response.msg, "Warning");
                }
            });
        }

        function getDocumentTypesIndex() {
            let action = '/DocumentType/GetDocTypeByEmployeeId';
            var datasend = {

            };
            PostDataAjax(action, datasend, function (response) {
                if (response.rs) {
                    let data = response.data;
                    bindDocumentTypeDropdownIndex($("#txtFilterMeSignDocumentType"), data);
                    bindDocumentTypeDropdownIndex($("#txtFilterSentDocumentType"), data);
                }
                else {
                    toastr.error(response.msg, "Thất bại");
                }
            });
        }

        function bindDocumentTypeDropdownIndex(selector, data) {
            let html = `<option value="">All</option>`;
            for (var i = 0; i < data.length; i++) {
                let ele = data[i];
                html += `
                        <option value="${ele.DocumentTypeID}">${ele.DocumentTypeName}</option>
                    `;
            }
            selector.html('').append(html);
        }

        function getTags() {
            let action = '/Tag/GetTagByEmployeeId';
            LoadingShow();
            GetDataAjax(action, function (response) {
                LoadingHide();
                if (response.rs) {
                    let data = response.data;
                    let html = `<div id='folder0' data-id='0' class='folder' onclick='tagClick(0)'>
    <div class="sortable-list">
        <span class='badge badge-success'>ALL <span id="number0">0</span></span>
      </div>
    </div>`;


                    data.forEach((item, index) => {
                        index++;
                        html += `<div id='folder${index}' data-id='${index}' class='folder' onclick='tagClick(${index})'>
    <div class="sortable-list">
        <span class='badge badge-light'>${item.TagName} <span id="number${index}">0</span></span>
      </div>
    </div>`;
                    })

                    $("#tag-area").html(html);
                }
                else {
                    toastr.error(response.msg, "Warning");
                }
            });
        }

    </script>

    <script>
        
        document.addEventListener('DOMContentLoaded', function () {
            var t1 = 0;
            var t2 = 0;

            // Lấy danh sách thư mục và tài liệu
            var folders = document.querySelectorAll('.folder');
            var documents = document.querySelectorAll('.sortable-list');

            // Khởi tạo Sortable cho từng thư mục và tài liệu
            folders.forEach(function (folder) {
                new Sortable(folder.querySelector('.sortable-list'), {
                    group: 'documents',
                    animation: 150,
                    onEnd: function (evt) {
                        var docId = evt.item.getAttribute('data-id');
                        var tagId = evt.to.parentNode.getAttribute('data-id');

                        $("#meSignDocumentDT").css("background", "");
                        resetFolderHighlight();
                        if (evt.to != evt.from) {
                            $('#doc' + docId).remove();
                        }

                        // update to backend
                        let action = baseUrl + 'AssignDocToTag';
                        var datasend = {
                            tagId: tagId,
                            docId: docId
                        };
                        PostDataAjax(action, datasend, function (response) {
                            if (response.rs) {
                                toastr.success(response.msg, "Thành công");
                            }
                            else {
                                toastr.error(response.msg, "Thất bại");
                            }
                        });
                    },
                    onMove: function (evt, originalEvent) {
                        // Reset the background color of all folders if not over a valid drop area
                        if (!isOverFolder(evt.from, originalEvent.clientX, originalEvent.clientY)) {
                            resetFolderHighlight();
                        }
 
                        // Highlight the target folder when dragging over it
                        var folder = evt.to.parentNode;
                        folder.style.backgroundColor = 'lightblue';
                    }
                });
            });

            // Reset the background color of all folders when the drag operation is cancelled
            document.addEventListener('dragend', function () {
                resetFolderHighlight();
            });

            function resetFolderHighlight() {
                folders.forEach(function (folder) {
                    folder.style.backgroundColor = '';
                });
            }

            function isOverFolder(container, x, y) {
                // Check if the dragged item is over the container
                var rect = container.getBoundingClientRect();
                return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;
            }
        })

    </script>
}